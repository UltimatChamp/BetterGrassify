plugins {
    id "dev.architectury.loom" version "1.9-SNAPSHOT"
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def loader = property("loom.platform")

def isFabric = loader == "fabric"
def isNeo = loader == "neoforge"

def isSnapshot = false
def mcVer = property("deps.minecraft_version")
if (mcVer.contains("-") || mcVer.contains("w")) {
    isSnapshot = true
    mcVer.replace("-", "")
}

version = project.mod_version + "+" + loader + "." + mcVer
group = project.maven_group

base {
    archivesName = project.mod_name
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.su5ed.dev/releases" }
    maven { url "https://maven.neoforged.net/releases" }
    mavenCentral()
}

loom {
    if (loader == "forge") {
        forge {
            mixinConfig "bettergrass.mixins.json"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${property("deps.minecraft_version")}"
    mappings(loom.layered {
        mappings("net.fabricmc:yarn:${property("deps.yarn_mappings")}:v2")
        if (stonecutter.eval(property("deps.minecraft_version"), "=1.21.1")) {
            mappings("dev.architectury:yarn-mappings-patch-neoforge:${property("deps.layered_mappings")}")
        }
    })

    if (isFabric) {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${property("deps.fapi_version")}"
        modImplementation "maven.modrinth:modmenu:${property("deps.modmenu_version")}"
        modImplementation "maven.modrinth:sodium:${property("deps.sodium_version")}"
    } else if (isNeo) {
        neoForge "net.neoforged:neoforge:${property("deps.neoforge")}"

        modImplementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${property("deps.fapi_version")}"
        modImplementation "maven.modrinth:sodium:${property("deps.sodium_version")}"
    }

    include(modImplementation("blue.endless:jankson:${property("deps.jankson_version")}"))
    modImplementation "dev.isxander:yet-another-config-lib:${property("deps.yacl_version")}"
}

if (stonecutter.current.isActive) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
        dependsOn(tasks.named("publishMods"))
    }
}

afterEvaluate {
    stonecutter {
        stonecutter.const("fabric", isFabric)
        stonecutter.const("neoforge", isNeo)
    }
}

processResources {
    var replaceProperties = [
            minecraft_range      : project.property("deps.mc_range"),
            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_license          : mod_license,
            mod_version          : project.version,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            sodium_incompat_range: project.property("deps.sodium_incompat_range"),
            mixins               : project.property("deps.mixins")
    ]
    replaceProperties.each { key, value -> inputs.property(key, value) }

    filesMatching("bettergrass.mixins.json") {
        expand replaceProperties
    }

    if (isFabric) {
        filesMatching("fabric.mod.json") {
            expand replaceProperties
        }
        exclude(["META-INF/mods.toml", "META-INF/neoforge.mods.toml"])
    } else if (isNeo) {
        filesMatching("META-INF/neoforge.mods.toml") {
            expand replaceProperties
        }
        exclude(["fabric.mod.json", "META-INF/mods.toml"])
    }

    def packFormat
    switch (project.property("deps.minecraft_version")) {
        case "1.21.1":
            packFormat = 34
            break
        case "1.21.3":
            packFormat = 42
            break
        case "1.21.4":
            packFormat = 46
            break
        default:
            packFormat = 55
    }

    filesMatching("pack.mcmeta") {
        expand("pack_format": packFormat)
    }
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishMods {
    if (mod_version.contains("alpha")) {
        type = ALPHA
    } else if (mod_version.contains("beta") || mod_version.contains("rc") || isSnapshot) {
        type = BETA
    } else {
        type = STABLE
    }

    changelog = "# ${project.version}\n" + file("../../CHANGELOG.md").text
    file = remapJar.archiveFile
    displayName = "BetterGrassify ${project.version}"

    def fapi
    if (isFabric) {
        fapi = "fabric-api"
        modLoaders.addAll("fabric", "quilt")
    } else if (isNeo) {
        fapi = "forgified-fabric-api"
        modLoaders.add("neoforge")
    }

    def mrOptions = modrinthOptions {
        projectId = "m5T5xmUy"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")

        requires(fapi)
        optional("yacl")

        // Discord
        announcementTitle = "Download from Modrinth"
    }

    def cfOptions = curseforgeOptions {
        projectId = "1026394"
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")

        requires(fapi)
        optional("yacl")

        // Discord
        announcementTitle = "Download from CurseForge"
        projectSlug = "bettergrassify"
    }

    if (project.property("deps.minecraft_version") == "1.21.1") {
        modrinth("m1.21.1") {
            from mrOptions

            minecraftVersionRange {
                start = "1.21"
                end = "1.21.1"
            }
        }

        curseforge("c1.21.1") {
            from cfOptions

            minecraftVersionRange {
                start = "1.21"
                end = "1.21.1"
            }
        }
    }

    if (project.property("deps.minecraft_version") == "1.21.3") {
        modrinth("m1.21.3") {
            from mrOptions

            minecraftVersionRange {
                start = "1.21.2"
                end = "1.21.3"
            }
        }

        curseforge("c1.21.3") {
            from cfOptions

            minecraftVersionRange {
                start = "1.21.2"
                end = "1.21.3"
            }
        }
    }

    if (project.property("deps.minecraft_version") == "1.21.4") {
        modrinth("m1.21.4") {
            from mrOptions

            minecraftVersions.add("1.21.4")
        }

        curseforge("c1.21.4") {
            from cfOptions

            minecraftVersions.add("1.21.4")
        }
    }

    if (project.property("deps.minecraft_version") == "1.21.5") {
        modrinth("m1.21.5") {
            from mrOptions

            minecraftVersions.add("1.21.5")
        }

        curseforge("c1.21.5") {
            from cfOptions

            minecraftVersions.add("1.21.5")
        }
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "UltimatChamp/BetterGrassify"
        commitish = "main"

        // Discord
        announcementTitle = "Download from GitHub"
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK")
        username = "BetterGrassify Releases"
        avatarUrl = "https://cdn.modrinth.com/data/m5T5xmUy/c67c1f900e8344e462bb5c21fb512579f3b0be46.png"

        style {
            look = "MODERN"
            thumbnailUrl = "https://cdn.modrinth.com/data/m5T5xmUy/images/3eaeda7d3cc1cec804e5176d9a21d8eb0f7ab8b6.png"
        }
    }
}
